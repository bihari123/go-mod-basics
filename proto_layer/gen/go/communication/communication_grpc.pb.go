// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProvisionClient is the client API for Provision service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProvisionClient interface {
	CallConnector(ctx context.Context, in *ConnectorRequest, opts ...grpc.CallOption) (*ConnectorResponse, error)
}

type provisionClient struct {
	cc grpc.ClientConnInterface
}

func NewProvisionClient(cc grpc.ClientConnInterface) ProvisionClient {
	return &provisionClient{cc}
}

func (c *provisionClient) CallConnector(ctx context.Context, in *ConnectorRequest, opts ...grpc.CallOption) (*ConnectorResponse, error) {
	out := new(ConnectorResponse)
	err := c.cc.Invoke(ctx, "/proto.Provision/CallConnector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProvisionServer is the server API for Provision service.
// All implementations must embed UnimplementedProvisionServer
// for forward compatibility
type ProvisionServer interface {
	CallConnector(context.Context, *ConnectorRequest) (*ConnectorResponse, error)
	mustEmbedUnimplementedProvisionServer()
}

// UnimplementedProvisionServer must be embedded to have forward compatible implementations.
type UnimplementedProvisionServer struct {
}

func (UnimplementedProvisionServer) CallConnector(context.Context, *ConnectorRequest) (*ConnectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CallConnector not implemented")
}
func (UnimplementedProvisionServer) mustEmbedUnimplementedProvisionServer() {}

// UnsafeProvisionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProvisionServer will
// result in compilation errors.
type UnsafeProvisionServer interface {
	mustEmbedUnimplementedProvisionServer()
}

func RegisterProvisionServer(s grpc.ServiceRegistrar, srv ProvisionServer) {
	s.RegisterService(&Provision_ServiceDesc, srv)
}

func _Provision_CallConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProvisionServer).CallConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Provision/CallConnector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProvisionServer).CallConnector(ctx, req.(*ConnectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Provision_ServiceDesc is the grpc.ServiceDesc for Provision service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Provision_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Provision",
	HandlerType: (*ProvisionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CallConnector",
			Handler:    _Provision_CallConnector_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "communication/communication.proto",
}

// ConnectorClient is the client API for Connector service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConnectorClient interface {
	CallProvision(ctx context.Context, in *ProvisionRequest, opts ...grpc.CallOption) (*ProvisionResponse, error)
}

type connectorClient struct {
	cc grpc.ClientConnInterface
}

func NewConnectorClient(cc grpc.ClientConnInterface) ConnectorClient {
	return &connectorClient{cc}
}

func (c *connectorClient) CallProvision(ctx context.Context, in *ProvisionRequest, opts ...grpc.CallOption) (*ProvisionResponse, error) {
	out := new(ProvisionResponse)
	err := c.cc.Invoke(ctx, "/proto.Connector/CallProvision", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConnectorServer is the server API for Connector service.
// All implementations must embed UnimplementedConnectorServer
// for forward compatibility
type ConnectorServer interface {
	CallProvision(context.Context, *ProvisionRequest) (*ProvisionResponse, error)
	mustEmbedUnimplementedConnectorServer()
}

// UnimplementedConnectorServer must be embedded to have forward compatible implementations.
type UnimplementedConnectorServer struct {
}

func (UnimplementedConnectorServer) CallProvision(context.Context, *ProvisionRequest) (*ProvisionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CallProvision not implemented")
}
func (UnimplementedConnectorServer) mustEmbedUnimplementedConnectorServer() {}

// UnsafeConnectorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConnectorServer will
// result in compilation errors.
type UnsafeConnectorServer interface {
	mustEmbedUnimplementedConnectorServer()
}

func RegisterConnectorServer(s grpc.ServiceRegistrar, srv ConnectorServer) {
	s.RegisterService(&Connector_ServiceDesc, srv)
}

func _Connector_CallProvision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProvisionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorServer).CallProvision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Connector/CallProvision",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorServer).CallProvision(ctx, req.(*ProvisionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Connector_ServiceDesc is the grpc.ServiceDesc for Connector service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Connector_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Connector",
	HandlerType: (*ConnectorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CallProvision",
			Handler:    _Connector_CallProvision_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "communication/communication.proto",
}
